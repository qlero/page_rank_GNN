"""
Implementation of a class generating random graphs using two methods:
    - Erdos'
    - Scale free generation
"""

###########
# IMPORTS #
###########

from networkx import erdos_renyi_graph, scale_free_graph
from networkx import pagerank, set_node_attributes, DiGraph

###########
# CLASSES #
###########

class Random_Graph_Generator():
    """
    Implementation of a Random Graph Generator.
    """
    def __init__(
            self, 
            graph_type: str,
            print_messages: bool = False
    ) -> None:
        """
        Initialization method

        Parameters
        ----------
        graph_type : string
            Defines the type of graph generated by an
            implementation of the Random_Graph_Generator
            class
        """
        # Defines the generator function
        if graph_type.lower() == "erdos":
            if print_messages:
                print("Erdos Graph Generator declared")
            self.type            = "e"
            self.graph_generator = erdos_renyi_graph
        else:
            if print_messages:
                print("Scale-Free Graph Generator declared")
            self.type            = "s"
            self.graph_generator = scale_free_graph
        self.print_msg           = print_messages
        # Defines the placeholders
        self.graphs              = None
        self.page_ranks          = None
            
    def graphs_generate(
            self, 
            m: int, 
            n: int, 
            p: float = None
    ) -> None:
        """
        Generator method. Produces m graphs of n nodes
        with edges with probability p (in the case of
        Erdos' method).

        Parameters
        ----------
        m : integrer
            Number of graphs generated
        n : integer
            Number of nodes in each graph
        p : float, optional
            Probability for edge creation
        """
        if self.type == "e":
            self.graphs = [DiGraph(self.graph_generator(n, p, directed=True))
                           for _ in range(m)]
        else:
            self.graphs = [DiGraph(self.graph_generator(n))
                           for _ in range(m)]
        if self.print_msg:
            print(f"{n} graphs were generated")
    
    def graphs_page_rank_compute(
            self
    ) -> None:
        """
        Given a set of generated graphs stored in the
        self.graphs attributes, computes each graph's
        PageRank value

        Parameters
        ----------
        alpha : float, optional
            Damping parameter for PageRank, default=0.85
        """
        self.page_ranks = [pagerank(g) 
                           for g in self.graphs]
        for graph, PR in enumerate(self.page_ranks):
            set_node_attributes(
                self.graphs[graph], 
                PR, 
                "PageRank"
            )
        if self.print_msg:
            print("PageRank values computed")
    
    def graphs_retrieve(self) -> tuple:
        """
        Returns the generated graphs and their respective
        PageRank values in the shape of a X, y tuple.
        
        Returns
        -------
        Tuple
            returns the (X, y) tuple where X is the list
            of graphs, and y the corresponding list of
            PageRank values
        """
        return (self.graphs, self.page_ranks)
        